package main

import "strings"

var mapType = map[string]string{
	//Int Ranges
	"Int8":  "int8",
	"Int16": "int16",
	"Int32": "int32",
	"Int64": "int64",

	//Uint Ranges
	"UInt8":  "uint8",
	"UInt16": "uint16",
	"UInt32": "uint32",
	"UInt64": "uint64",

	//Float Ranges
	"Float32": "float32",
	"Float64": "float64",

	//String
	"String": "string",

	//FixedString
	"FixedString": "string",

	//Enum type
	"Enum": "string",

	//Data types
	"Date":     "time.Time",
	"DateTime": "time.Time",

	//Array(T) types
	"Array(String)":  "[]string",
	"Array(Int8)":    "[]int8",
	"Array(Int16)":   "[]int16",
	"Array(Int32)":   "[]int32",
	"Array(Int64)":   "[]int64",
	"Array(UInt8)":   "[]uint8",
	"Array(UInt16)":  "[]uint16",
	"Array(UInt32)":  "[]uint32",
	"Array(UInt64)":  "[]uint64",
	"Array(Float32)": "[]float32",
	"Array(Float64)": "[]float64",
}

func cast(t string) (string, bool) {
	if strings.HasPrefix(t, "Enum8") || strings.HasPrefix(t, "Enum16") {
		t = "Enum"
	}

	if strings.HasPrefix(t, "FixedString") {
		t = "FixedString"
	}

	tcast, ok := mapType[t]
	return tcast, ok
}

var temp = `
// Code generated by clickhouse-gen. DO NOT EDIT.

package {{.Package}}

{{if .Imports}} 
import (
{{- range .Imports }}
	"{{.}}"
{{- end}}
)
{{end}}

//{{.ModelName}}
type {{.ModelName}} struct {
    {{- range .Opts }}
        {{.Name}} {{.Type}} ` + "`" + `db:"{{.ColumnName}}" json:"{{.ColumnName}},omitempty"` + "`" + `
    {{- end}}
}

//GetQuery{{.ModelName}}
func GetQuery{{.ModelName}}() string {
	return "{{.InsertQuery}}"
}

//GetArgs
func (model {{.ModelName}}) GetArgs() []interface{} { 
	r := make([]interface{}, 0)
	r = append(r, 
	 {{- range .Opts }}
		model.{{.Name}},
	 {{- end}}
	)
	return r
}

//TableName
func (model {{.ModelName}}) TableName() string {
  return "{{.TableName}}"
}

//BaseName
func (model {{.ModelName}}) BaseName() string {
  return "{{.BaseName}}"
}
`
